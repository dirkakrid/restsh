#!/usr/bin/env python
# -*- coding: utf-8 -*-

import readline
import simplejson
from restshlib.restshlib import RestSH
import getpass
import base64
import sys

HELP_TEXT = '''Usage: command [<command-option>...]

Change cliente status:
  set [header, setting] <header-key> <header-value>
  unset [header, setting] <header-key>
  show [headers, settings]
  login <username>
  baseurl <host>

Rest actions:
  get <url>
  post <url> <json-format-data>
  put <url> <json-format-data>
  delete <url>
'''

def print_response(response, settings):
    if settings.get('print_request', "1") in ["1","yes","true"]:
        print "Request:"
        print "  url: %s" % (unicode(response.request.full_url))
        print "  data: %s" % (unicode(response.request.data))
        print "  headers:"
        for header in response.request.headers.iteritems():
            print "    %s: %s" % (unicode(header[0]), unicode(header[1]))
    if settings.get('print_body', "1") in ["1","yes","true"]:
        print "Response body:"
        print response.text
    if settings.get('print_headers', "1") in ["1","yes","true"]:
        print "Response headers:"
        for header in response.headers.iteritems():
            print "  %s: %s" % (header[0], header[1])
    if settings.get('print_status', "1") in ["1","yes","true"]:
        print "Status Code: %s" % (unicode(response.status_code))

if __name__=='__main__':
    login = "no-user"
    base_url = "no-host"

    restsh = RestSH()
    restsh.set_setting("prompt", "%(login)s@%(baseurl)s|restsh> ")

    if len(sys.argv)>1:
        base_url = sys.argv[1]
        restsh.set_base_url(base_url)
    
    while True:
        try:
            try:
                prompt = restsh.settings['prompt']
                command = raw_input(prompt % {"login": login, "baseurl": base_url})
            except EOFError:
                command = "quit"
            command_split = command.split()
            if len(command_split) == 0:
                pass
            elif command_split[0] == 'quit':
                break
            elif command_split[0] == 'help':
                print HELP_TEXT
            elif command_split[0] == 'show':
                if command_split[1] == "headers":
                    for header in restsh.headers.iteritems():
                        print "%s: %s" % (header[0], header[1])
                elif command_split[1] == "settings":
                    for setting in restsh.settings.iteritems():
                        print "%s: %s" % (setting[0], setting[1])
            elif command_split[0] == 'set':
                if command_split[1] == "header":
                    restsh.set_header(command_split[2], ' '.join(command_split[3:]))
                elif command_split[1] == "setting":
                    restsh.set_setting(command_split[2], ' '.join(command_split[3:]))
            elif command_split[0] == 'unset':
                if command_split[1] == "header":
                    restsh.unset_header(command_split[2])
                elif command_split[1] == "setting":
                    restsh.unset_setting(command_split[2])
            elif command_split[0] == 'baseurl':
                base_url = ' '.join(command_split[1:])
                restsh.set_base_url(base_url)
            elif command_split[0] == 'login':
                login = ' '.join(command_split[1:])
                password = getpass.getpass('Password: ')
                restsh.set_auth(login, password, restsh.settings.get('auth_method', 'basic'))
            elif command_split[0] == 'get':
                response = restsh.get(' '.join(command_split[1:]))
                print_response(response, restsh.settings)
            elif command_split[0] == 'post':
                response = restsh.post(command_split[1], simplejson.loads(' '.join(command_split[2:])))
                print_response(response, restsh.settings)
            elif command_split[0] == 'put':
                response = restsh.put(command_split[1], simplejson.loads(' '.join(command_split[2:])))
                print_response(response, restsh.settings)
            elif command_split[0] == 'delete':
                response = restsh.delete(' '.join(command_split[1:]))
                print_response(response, restsh.settings)
            else:
                print "ERROR: Command not found"
                print HELP_TEXT
                pass
        except IndexError:
            print "ERROR: Invalid parameters for %s command" % command_split[0]
            print HELP_TEXT
        except simplejson.decoder.JSONDecodeError as e:
            print "JSON ERROR: %s" % (str(e))
            print "Your PUT and POST data parameter must be in JSON format."
        except Exception as e:
            raise
            print "ERROR: %s" % (str(e))

